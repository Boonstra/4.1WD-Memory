memory_script = function()
{
	var self = { };

	/**
	 * Initialize.
	 */
	self.init = function()
	{
//		self.$newGameButton = $$('.new-game-button');
//
//		self.$cardViewTimeSlider      = $$('.card-view-time-slider');
//		self.$cardViewTimeSliderValue = $$('.card-view-time-slider-value');

//		self.$board = $$('.board');
//
//		self.prepareBoard();

		self.currentGame = new self.Game(4, 4);

		// Listeners
//		self.$newGameButton.addEvent('click', function(event){ event.preventDefault(); self.prepareBoard(); });
//
//		self.$board.addEvent('click:relay(.card-container)', function(event, element){ self.handleCardClick(element); });
	};

//	/**
//	 * Prepare the board for a new game.
//	 */
//	self.prepareBoard = function()
//	{
//		var $cardContainer,
//			$cardFlipper,
//			$cardFront,
//			$cardBack,
//			cellX,
//			cellY,
//			alphabet,
//			alphabetCharacter,
//			alphabetCharacterIndex,
//			cardValues,
//			cardValuesCharacterIndex;
//
//		alphabet = [
//			'A',
//			'B',
//			'C',
//			'D',
//			'E',
//			'F',
//			'G',
//			'H',
//			'I',
//			'J',
//			'K',
//			'L',
//			'M',
//			'N',
//			'O',
//			'P',
//			'Q',
//			'R',
//			'S',
//			'T',
//			'U',
//			'V',
//			'W',
//			'X',
//			'Y',
//			'Z'
//		];
//
//		cardValues = [];
//
//		for (null; cardValues.length < self.cellCountX * self.cellCountY; null)
//		{
//			alphabetCharacterIndex = Math.floor(Math.random() * alphabet.length);
//
//			alphabetCharacter = alphabet[alphabetCharacterIndex];
//
//			// The same character needs to be added twice
//			cardValues.push(alphabetCharacter, alphabetCharacter);
//
//			alphabet.splice(alphabetCharacterIndex, 1);
//		}
//
//		self.$board.set('html', '');
//
//		for (cellY = 0; cellY < self.cellCountY; cellY++)
//		{
//			for (cellX = 0; cellX < self.cellCountX; cellX++)
//			{
//				cardValuesCharacterIndex = Math.floor(Math.random() * cardValues.length);
//
//				$cardContainer = new Element('div', { 'class': 'card-container' });
//				$cardFlipper   = new Element('div', { 'class': 'card-flipper' });
//				$cardFront     = new Element('div', { 'class': 'card-front', 'html': '*' });
//				$cardBack      = new Element('div', { 'class': 'card-back', 'html': cardValues[cardValuesCharacterIndex] });
//
//				cardValues.splice(cardValuesCharacterIndex, 1);
//
//				$cardFlipper.adopt($cardFront, $cardBack);
//
//				$cardContainer.adopt($cardFlipper);
//
//				self.$board.adopt($cardContainer);
//			}
//
//			self.$board.adopt(new Element('div', { 'class': 'clear' }));
//		}
//	};

	window.addEvent('domready', function()
	{
		self.init();
	});

	return self;
}();






(function()
{
	var self = memory_script;

	/**
	 * Constructor.
	 *
	 * @param cellCountX
	 * @param cellCountY
	 */
	self.Game = function(cellCountX, cellCountY)
	{
		// Variables
		this.cellCountX         = cellCountX;
		this.cellCountY         = cellCountY;
		this.players            = [new self.Player('Player 1'), new self.Player('Player 2')];
		this.currentPlayerIndex = Math.floor(Math.random() * this.players.length);
		this.turnedCardElements = [];

		// Elements
		this.$board            = $$('.board');
		this.$revealTimeSlider = $$('.card-view-time-slider');

		// Events
		this.$board.addEvent('click:relay(.card-container)', (function(event, element){ this.handleCardClick(element); }).bind(this));

		// Start up
		this.prepareBoard(cellCountX, cellCountY);
	};

	/**
	 * Handles a click on a card.
	 *
	 * @param element
	 */
	self.Game.prototype.handleCardClick = function(element)
	{
		var $element = $$(element);

		if (this.turnedCardElements.length >= 2)
		{
			return;
		}

		$element.addClass('flipped');

		this.turnedCardElements.push($element);

		if (this.turnedCardElements.length >= 2)
		{

		}
	};
})();
(function()
{
	var self = memory_script;

	/**
	 * Prepares the board for a game.
	 *
	 * @param cellCountX
	 * @param cellCountY
	 */
	self.Game.prototype.prepareBoard = function(cellCountX, cellCountY)
	{
		var $cardContainer,
			$cardFlipper,
			$cardFront,
			$cardBack,
			cellX,
			cellY,
			alphabet,
			alphabetCharacter,
			alphabetCharacterIndex,
			cardValues,
			cardValuesCharacterIndex;

		alphabet = [
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z'
		];

		cardValues = [];

		for (null; cardValues.length < cellCountX * cellCountY; null)
		{
			alphabetCharacterIndex = Math.floor(Math.random() * alphabet.length);

			alphabetCharacter = alphabet[alphabetCharacterIndex];

			// The same character needs to be added twice
			cardValues.push(alphabetCharacter, alphabetCharacter);

			alphabet.splice(alphabetCharacterIndex, 1);
		}

		this.$board.set('html', '');

		for (cellY = 0; cellY < cellCountY; cellY++)
		{
			for (cellX = 0; cellX < cellCountX; cellX++)
			{
				cardValuesCharacterIndex = Math.floor(Math.random() * cardValues.length);

				$cardContainer = new Element('div', { 'class': 'card-container' });
				$cardFlipper   = new Element('div', { 'class': 'card-flipper' });
				$cardFront     = new Element('div', { 'class': 'card-front', 'html': '*' });
				$cardBack      = new Element('div', { 'class': 'card-back', 'html': cardValues[cardValuesCharacterIndex] });

				cardValues.splice(cardValuesCharacterIndex, 1);

				$cardFlipper.adopt($cardFront, $cardBack);

				$cardContainer.adopt($cardFlipper);

				this.$board.adopt($cardContainer);
			}

			this.$board.adopt(new Element('div', { 'class': 'clear' }));
		}
	};
})();
(function()
{
	var self = memory_script;

	/**
	 *
	 */
	self.Game.prototype.turn = function()
	{

	};
})();
(function()
{
	var self = memory_script;

	/**
	 * Constructor.
	 *
	 * @param name
	 */
	self.Player = function(name)
	{
		this.name  = name;
		this.score = 0;
	};
})();